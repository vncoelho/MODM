// ===================================
// Main.cpp file generated by OptFrame
// Project MODM
// ===================================

#include <stdlib.h>
#include <math.h>
#include <iostream>

#include "../OptFrame/Loader.hpp"
#include "MODM.h"

using namespace std;
using namespace optframe;
using namespace MODM;

int main(int argc, char **argv)
{
	RandGenMersenneTwister rg;
	long seed = time(NULL);
	seed = 10;
	cout << "Seed = " << seed << endl;
	srand(seed);
	rg.setSeed(seed);

	Loader<RepMODM, AdsMODM> optframe(rg);

	//MODMProblemCommand pc(rg);
	cout << "Olaa" << endl;
	cout << "Program ended successfully" << endl;

	//string filename = "./MyProjects/MODM/Instances/S3-15/S3-10-15-1-l.txt";
	string filename = "./MyProjects/MODM/Instances/L-5/L-10-5-1-l.txt";

	File* file;

	try
	{
		file = new File(filename);
	} catch (FileNotFound& f)
	{
		cout << "File '" << filename << "' not found" << endl;
		return false;
	}

	Scanner scanner(file);

	ProblemInstance p(scanner);

	// add everything to the HeuristicFactory 'hf'

	MODMADSManager adsMan(p);
	MODMEvaluator eval(p, adsMan);

	ConstructiveBasicGreedyRandomized grC(p, rg, adsMan);

	NSSeqSWAP nsseq_swap(rg, &p);
	NSSeqSWAPInter nsseq_swapInter(rg, &p);
	NSSeqInvert nsseq_invert(rg, &p);
	NSSeqARProduct nsseq_arProduct(rg, &p);


	FirstImprovement<RepMODM, AdsMODM> fiSwap(eval, nsseq_swap);
	FirstImprovement<RepMODM, AdsMODM> fiSwapInter(eval, nsseq_swapInter);
	FirstImprovement<RepMODM, AdsMODM> fiInvert(eval, nsseq_invert);

	RandomDescentMethod<RepMODM, AdsMODM> rdmSwap(eval, nsseq_swap,1000);
	RandomDescentMethod<RepMODM, AdsMODM> rdmSwapInter(eval, nsseq_swapInter,1000);
	RandomDescentMethod<RepMODM, AdsMODM> rdmInvert(eval, nsseq_invert,1000);

	vector<LocalSearch<RepMODM, AdsMODM>*> vLS;
	//vLS.push_back(&fiSwap);
	// vLS.push_back(&fiSwapInter);
	vLS.push_back(&fiInvert);

	//vLS.push_back(&rdmSwap);
	//vLS.push_back(&rdmSwapInter);
	//vLS.push_back(&rdmInvert);

	VariableNeighborhoodDescent<RepMODM, AdsMODM> vnd(eval, vLS);

	ILSLPerturbationLPlus2<RepMODM, AdsMODM> ilsl_pert(eval, 100000, nsseq_swap, rg);
	ilsl_pert.add_ns(nsseq_swapInter);
	ilsl_pert.add_ns(nsseq_invert);
	ilsl_pert.add_ns(nsseq_arProduct);


	IteratedLocalSearchLevels<RepMODM, AdsMODM> ils(eval, grC, vnd, ilsl_pert, 1000, 15);
	ils.setMessageLevel(3);

	pair<Solution<RepMODM, AdsMODM>&, Evaluation<>&>* finalSol;

	EmptyLocalSearch<RepMODM, AdsMODM> emptyLS;
	BasicGRASP<RepMODM, AdsMODM> g(eval, grC, emptyLS, 0.1, 100000);

	g.setMessageLevel(3);

	//MODMProblemCommand problemCommand(rg);

	int time = 600;
	double target=999999;
	finalSol = ils.search(time,target);

	cout<<"ILS HAS ENDED!"<<endl;
	finalSol->second.print();
	//finalSol = g.search(time,target);

	cout<<eval.getAverageTime()<<endl;
	cout<<eval.getAverageTimeEvalComplete()<<endl;
	cout<<"Programa terminado com sucesso!"<<endl;
	return 0;
}
;

