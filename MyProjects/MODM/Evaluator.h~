#ifndef MODM_EVALUATOR_H_
#define MODM_EVALUATOR_H_

//#include <cmath>
#include <stdlib.h>
#include <math.h>

#include "../../OptFrame/Evaluation.hpp"
#include "../../OptFrame/Evaluator.hpp"

#include "Representation.h"
#include "ADS.h"

#include "DeltaStructure.h"
#include "Solution.h"
#include "Evaluation.h"

#include "ProblemInstance.h"

#define EPSILON_MODM 0.0001


namespace MODM
{

class MODMEvaluator: public Evaluator<RepMODM, AdsMODM>
{
private:
	ProblemInstance& pMODM;
	MODMADSManager& adsMan;
	// Your private vars

public:
	MODMEvaluator(ProblemInstance& _pMODM, MODMADSManager& _adsMan) : // If necessary, add more parameters
			pMODM(_pMODM), adsMan(_adsMan)
	{
		// Put the rest of your code here
	}

	virtual ~MODMEvaluator()
	{
	}

	EvaluationMODM& evaluate(const RepMODM& rep)
	{
		AdsMODM ads;
		adsMan.initializeADS(rep, ads);
		return evaluate(rep, ads);
	}

	EvaluationMODM& evaluate(const RepMODM& rep, const AdsMODM& ads)
	{

		// 'rep' is the representation of the solution
		int c = pMODM.getNumberOfClients();
		int n = pMODM.getNumberOfProducts();

		double fo = 0; // Evaluation Function Value
		double foRevenue = 0;
		double foBudget = 0;
		double foFixedCost = 0;
		double foInvMin = 0;
		double foInvBud = 0;
		double foInvHR = 0;

		for (int product = 0; product < n; product++)
		{
			foRevenue += ads.totalRevenue[product];
			foBudget += ads.totalCost[product];

			if (ads.productOffers[product] > 0)
			{
				foFixedCost += pMODM.getProductFixedCost(product);

				if (ads.productOffers[product] < pMODM.minClients[product])
				{
					foInvMin = ads.productOffers[product] - pMODM.minClients[product];
					cout << "BUG ON EVALUATOR - NUMERO MINIMO CLIENTE NAO FOI RESPEITADO!!!" << endl;
					cout << "ads.productOffers[product] = " << ads.productOffers[product] << endl;
					cout << "pMODM.minClients[product] = " << pMODM.minClients[product] << endl;
					//getchar();
				}
			}

			if (ads.totalCost[product] > pMODM.getProductBudget(product))
			{
				foInvBud = ads.totalCost[product] - pMODM.getProductBudget(product);
				cout << "BUG ON EVALUATOR - BUDGET NAO FOI RESPEITADO!!!" << endl;
				cout << "ads.totalCost[product] = " << ads.totalCost[product] << endl;
				cout << "pMODM.getProductBudget(product) = " << pMODM.getProductBudget(product) << endl;
				//getchar();
			}

		}

		//Verificar inviabilidades
		if (foRevenue < ((1 + pMODM.getHurdleRate()) * (foBudget + foFixedCost)))
		{
			foInvHR = 1;
			cout << "BUG ON EVALUATOR - LUCRO MENOR QUE O ESPERADO!!!" << endl;
			//getchar();
		}

		fo = foRevenue - foBudget - foFixedCost;
		double foInv = (foInvHR + foInvBud + foInvMin) * (-100000);
		//cout << "FO = " << fo << endl;

		/*
		 FILE* arquivo = fopen("log.txt", "a");
		 if (!arquivo)
		 {
		 cout << "ERRO: falha ao criar arquivo \"log.txt\"" << endl;
		 }
		 else
		 {

		 fprintf(arquivo, "%.4f\t \n", fo);

		 fclose(arquivo);
		 }*/

		return *new EvaluationMODM(fo, foInv, *new int);
	}

	void exportEvaluation(const RepMODM& rep, const AdsMODM& ads, string filename, string outFile)
	{
		EvaluationMODM& e = evaluate(rep, ads);

		double fo = e.evaluation();

		FILE* f = fopen(outFile.c_str(), "w");

		fprintf(f, "%s \t %.2f \n", filename.c_str(), fo);

		fclose(f);
	}

	virtual bool betterThan(double a, double b)
	{
		// MAXIMIZATION
		return (a > (b + EPSILON_MODM));
	}

	virtual bool isMinimization() {
		return false;
	}
};


}

#endif /*MODM_EVALUATOR_H_*/

